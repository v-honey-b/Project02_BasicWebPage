package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import service.BoardService;
import service.BoardServiceImpl;

@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger log = LoggerFactory.getLogger(BoardController.class);
	private RequestDispatcher rdp;
	private String destPage;
	private int isUp;
	private BoardService bsv;	// service 폴더에 interface로 추가
	
    public BoardController() {
    	bsv = new BoardServiceImpl();	// service 폴더에 클래스 생성
    }

	protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		res.setCharacterEncoding("utf-8");
		res.setContentType("text/html; charset=utf-8");
		
		String uri = req.getRequestURI();	// 서비스를 요청하는 주소 ex)brd/insert
		String path = uri.substring(uri.lastIndexOf("/") + 1);	// ex)insert
		log.info("path : " + path);
		
		// 각 요청하는 서비스를 처리
		switch(path) {
		case "boardregister" :	// 글쓰기 페이지 호출
			destPage = "/board/boardregister.jsp";
			break;
		case "boardinsert" :	// 글 등록
			/* String title = req.getParameter("title");
			String writer = req.getParameter("writer");
			String content = req.getParameter("content");
			
			isUp = bsv.boardRegister(new BoardVO(title, writer, content)); */
			
			isUp = bsv.boardregister(new BoardVO(req.getParameter("title"), req.getParameter("writer"), req.getParameter("content")));
			log.info(">>> boardinsert >>>" + (isUp > 0 ? "OK" : "FAIL"));
			destPage = "boardlist";
			break;
		case "boardlist" :		// 전체 리스트
			// req.setAttribute("boardlist", getBoardList());
			List<BoardVO> boardlist = bsv.getBoardList();
			req.setAttribute("boardlist", boardlist);
			log.info(">>> boardlist >>> OK");
			destPage = "/board/boardlist.jsp";
			break;
		case "boarddetail" :		// 세부 글 보기
			// req.setAttribute("bvo", bsv.getBoardDetail(Integer.parseInt(req.getParameter("bno"))));
			int bno = Integer.parseInt(req.getParameter("bno"));	// bno를 가져와서 형변환 후 변수에 저장
			BoardVO bvo = bsv.getBoardDetail(bno);
			break;
		case "boardmodify" :		// 수정 페이지로 이동
			
			break;
		case "boardupdate" :		// 실제 수정이 일어나는 부분
			
			break;
		case "boardremove" :		// 실제 삭제가 일어나는 부분
			
			break;
		}
		
		// destPage : 목적지 결정
		rdp = req.getRequestDispatcher(destPage);
		rdp.forward(req, res);
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
